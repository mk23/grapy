#!/usr/bin/env python

import glob
import logging
import logging.handlers
import socket
import grapy
import sys
import yaml

def create_log(logger=None, debug=False):
    log = logging.getLogger()
#    log.removeHandler(log.handlers[0]) # remove default stderr logger

    if logger or debug:
        if logger and logger.startswith('syslog:'):
            log_hdlr = logging.handlers.SysLogHandler(facility=logger.split(':')[-1])
        elif logger and not logger.startswith('console:'):
            log_hdlr = logging.FileHandler(logger)
        else:
            log_hdlr = logging.StreamHandler()

        log_hdlr.setFormatter(logging.Formatter('%(asctime)s.%(msecs)03d - %(filename)16s:%(lineno)-3d %(levelname)8s: %(message)s', '%Y-%m-%d %H:%M:%S'))

        log.setLevel(logging.DEBUG if debug else logging.INFO)
        log.addHandler(log_hdlr)

        log.info('logging started')
    else:
        log.addHandler(logging.NullHandler())

    return log

def parse_conf(config, parser):
    try:
        conf = yaml.load(open(config))
    except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
        parser.error('cannot parse configuration file: %s' % e)

    parser.set_defaults(**(conf.get('grapy_global')))
    args = parser.parse_args()

    if args.include_dir:
        for item in glob.glob('%s/*.yml' % args.include_dir):
            try:
                conf = dict(conf.items() + yaml.load(open(item)).items())
            except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
                parser.error('cannot parse configuration file: %s' % e)

    return conf


def build_conf(name, items):
    conf = dict([('name', name), ('objects', {})] + GRAPY_GLOBAL.items())
    for item in items:
        key = item[0].split('.')
        if unicode(key[-1]).isnumeric():
            idx = int(key[-1])
            if conf['objects'].has_key(idx):
                conf['objects'][idx][key[0]] = item[1]
            else:
                conf['objects'][idx] = {key[0]: item[1]}
        else:
            conf[item[0]] = item[1]

    return conf

def initialize(conf):
    log.info('initialization started')

    try:
        log.info('configuring %d metric(s): %s', len(conf.sections()), ', '.join(conf.sections()))

        mods = {}
        for name in conf.sections():
            args = build_conf(name, conf.items(name))
            base = conf.get(name, 'module')
            full = 'grapy.%s' % base

            if full not in sys.modules:
                __import__(full)
                log.debug('importing module %s', full)

            log.debug('added plugin %s to module list', name)

            try:
                mods[name] = getattr(sys.modules[full], base)(args)
                log.debug('created plugin %s instance of %s (%s)', name, base, mods[name])
            except Exception as e:
                grapy.log_exc(e, '%s: failed to initialize plugin' % name)

    except Exception as e:
        grapy.log_exc(e, 'initialization failed')
        sys.exit(1)

    log.info('initialization complete')
    return mods


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='graphite publishing system')
    parser.add_argument('-H', '--hostname', default='localhost',
                        help='global default host address')
    parser.add_argument('-C', '--snmp-community', default='public',
                        help='global default snmp community')
    parser.add_argument('-V', '--snmp-version', default=2, type=int,
                        help='global default snmp version')
    parser.add_argument('-i', '--include-dir',
                        help='location for extra configuration files')
    parser.add_argument('-s', '--persist-dir', default='/var/lib/grapy',
                        help='location for state files')
    parser.add_argument('-c', '--carbon-host', default='localhost',
                        help='destination carbon host')
    parser.add_argument('-p', '--carbon-port', default=2004, type=int,
                        help='destination carbon port')
    parser.add_argument('-x', '--host-prefix', default=socket.gethostname().split('.')[0],
                        help='graphite host key prefix')
    parser.add_argument('-f', '--config', default='/etc/grapy.yml',
                        help='grapy configuration file')
    parser.add_argument('-l', '--logger',
                        help='log to file, console:, or syslog:<facility>')
    parser.add_argument('-d', '--debug', default=False, action='store_true', help=argparse.SUPPRESS)
    args = parser.parse_args()

    conf = parse_conf(args.config, parser)

#    log = create_log(args.logger, args.debug)
#    try:
#        conf = parse_conf(args)
#        mods = initialize(conf)
#    except SystemExit as e:
#        log.info('grapy exiting: %s', e)
#
# vim: ft=python sw=4 ts=4 sts=4 sta si et nu ruler cinwords=if,elif,else,for,while,try,except,finally,def,class
