#!/usr/bin/env python

import imp
import glob
import grapy
import logging
import logging.handlers
import socket
import sys
import yaml

def create_log(logger=None, debug=False):
    log = logging.getLogger()

    if logger or debug:
        if logger and logger.startswith('syslog:'):
            log_hdlr = logging.handlers.SysLogHandler(facility=logger.split(':')[-1])
        elif logger and not logger.startswith('console:'):
            log_hdlr = logging.FileHandler(logger)
        else:
            log_hdlr = logging.StreamHandler()

        log_hdlr.setFormatter(logging.Formatter('%(asctime)s.%(msecs)03d - %(filename)16s:%(lineno)-3d %(levelname)8s: %(message)s', '%Y-%m-%d %H:%M:%S'))

        log.setLevel(logging.DEBUG if debug else logging.INFO)
        log.addHandler(log_hdlr)

        log.debug('logging started')
    else:
        log.addHandler(logging.NullHandler())

    return log


def parse_conf(parser):
    try:
        args = parser.parse_args()
        conf = yaml.load(open(args.config_file))

        parser.set_defaults(**(conf['grapy_global']))

        args = parser.parse_args()
        conf['grapy_global'].update(vars(args))
    except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
        parser.error('cannot parse configuration file: %s' % e)

    if conf['grapy_global']['include_dir']:
        for item in glob.glob('%s/*.yml' % conf['grapy_global']['include_dir']):
            try:
                conf = dict(conf.items() + yaml.load(open(item)).items())
            except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
                parser.error('cannot parse configuration file: %s' % e)

    return conf

def run_plugins(conf):
    log.info('collection started')

    try:
        glbl = conf.pop('grapy_global')
        log.info('configured %d metric(s): %s', len(conf), ', '.join(conf.keys()))

        for name, item in conf.items():
            if name in glbl['exclude_pollers']:
                log.info('%s: skipping excluded poller', name)
                continue
            try:
                log.info('began poller: %s', name)

                args = {'plugin_name': name}
                args.update(glbl.items() + item.items())

                poller = imp.load_module(item['poller'], *(imp.find_module(item['poller'], grapy.__path__)))
                getattr(poller, item['poller'])(args)

                log.debug('ended poller %s instance of %s', name, item['poller'])
            except Exception as e:
                grapy.log_exc(e, '%s: failed to run plugin' % name)

        grapy.publish(glbl['carbon_host'], glbl['carbon_port'], glbl['carbon_type'])
    except Exception as e:
        grapy.log_exc(e, 'collection failed')
        sys.exit(1)

    log.info('collection complete')


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='graphite publishing system')
    parser.add_argument('-H', '--hostname', default='localhost',
                        help='global default host address')
    parser.add_argument('-C', '--snmp-community', default='public',
                        help='global default snmp community')
    parser.add_argument('-V', '--snmp-version', default=2, type=int,
                        help='global default snmp version')
    parser.add_argument('-i', '--include-dir',
                        help='location for extra configuration files')
    parser.add_argument('-s', '--persist-dir', default='/var/lib/grapy',
                        help='location for state files')
    parser.add_argument('-c', '--carbon-host', default='localhost',
                        help='destination carbon host')
    parser.add_argument('-p', '--carbon-port', default=2003, type=int,
                        help='destination carbon port')
    parser.add_argument('-r', '--carbon-type', default='text', choices=['text', 'pickle'],
                        help='destination carbon type')
    parser.add_argument('-x', '--host-prefix', default=socket.gethostname().split('.')[0],
                        help='graphite host key prefix')
    parser.add_argument('-f', '--config-file', default='/etc/grapy.yml',
                        help='grapy configuration file')
    parser.add_argument('-l', '--logger-dest',
                        help='log to file, console:, or syslog:<facility>')
    parser.add_argument('-e', '--exclude-pollers', default=[], nargs='+',
                        help='exclude selected pollers')
    parser.add_argument('-t', '--timeout', default=0, type=int,
                        help='poller interrupt time in seconds')
    parser.add_argument('-v', '--verbose', default=False, action='store_true',
                        help='enable verbose debug logs')

    cfg = parse_conf(parser)
    log = create_log(cfg['grapy_global']['logger_dest'], cfg['grapy_global']['verbose'])
    try:
        run_plugins(cfg)
    except SystemExit as e:
        log.info('grapy exiting: %s', e)

# vim: ft=python sw=4 ts=4 sts=4 sta si et nu ruler cinwords=if,elif,else,for,while,try,except,finally,def,class
